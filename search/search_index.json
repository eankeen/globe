{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"getting-started/","text":"Getting Started TODO (THIS IS OUT OF DATE) When setting up DotFox, you need two things: a dot directory ( dotDir ) and a destination directory ( destDir ). dotDir is a directory that your dotfiles tracked with your VCS of choice, such as ~/.dotfiles . destDir is the location to deploy your dotfiles to, such as ~/ . Specify these two things in ~/.config/dotfox/config.toml (or with using the config directory of your choice with XDG_CONFIG_HOME ) [config] dotDir = \"~/.dotfiles\" destDir = \"~\" Now, specify the dotfiles you wish to automatically deploy. These dotfiles will have symlinks created in the destDir , pointing to their respective file or directory in dotDir . Specify the dotfiles using a shell script located at ~/.config/dotfox/deployments/default.sh #!/usr/bin/env bash declare -r home=\"$HOME\" declare -r cfg=\"${XDG_CONFIG_HOME:-$HOME/.config}\" declare -r data=\"${XDG_DATA_HOME:-$HOME/.local/share}\" declare -ra dotfiles=( \"$home/.bashrc\" \"$home/.bash_logout\" ) for dotfile in \"${dotfiles[@]}\"; do printf \"%s\\n\" \"$dotfile\" done DotFox will execute this script, and use every line of standad output as a separate dotfile to track. Standard output would look like the following in this case /home/edwin/.bashrc /home/edwin/.bash_logout Note that with every line, there is always a prefix of the destDir ( /home/edwin i.e. ~/ ) Now, let's try running DotFox $ dotfox status [ERR_NULL_NULL] /home/edwin/.bashrc -> (not fixable) -> Is there a file or directory at /home/edwin/.dotfiles/.bashrc? [ERR_NULL_NULL] /home/edwin/.bash_logout -> (not fixable) -> Is there a file or directory at /home/edwin/.dotfiles/.bash_logout? Done. As you can see, there is a hint that tells us that we forgot to move our dotfiles to the dotDir . How useful! Let's do that... echo 'export EDITOR=\"vim\"' > ~/.dotfiles/.bashrc echo 'clear' > ~/.dotfiles/.bash_logout Now, let's try running again $ dotfox status [ERR_NULL_FILE] /home/edwin/.bashrc -> (fixable) [ERR_NULL_FILE] /home/edwin/.bash_logout -> (fixable) Done. As you can see, the ERR_NULL_NULL status codes changed to ERR_NULL_FILE . The last NULL changed to a file because we placed the correct files in the dotDir (destination directory) Now that the dotfiles are automatically fixable, let's run dotfox deploy $ dotfox deploy Done. $ dotfox status [OK] /home/edwin/.bashrc [OK] /home/edwin/.bash_logout Done. Cool, now the dotfiles have been resolved correctly. If you really want, you can check to see if the symlinks point to the correct location $ ls -al ~/.bash* lrwxrwxrwx 1 edwin edwin 34 Jun 29 21:36 /home/edwin/.bash_logout -> /home/edwin/.dotfiles/.bash_logout lrwxrwxrwx 1 edwin edwin 29 Jun 29 21:36 /home/edwin/.bashrc -> /home/edwin/.dotfiles/.bashrc And they do have their correct target files!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"TODO (THIS IS OUT OF DATE) When setting up DotFox, you need two things: a dot directory ( dotDir ) and a destination directory ( destDir ). dotDir is a directory that your dotfiles tracked with your VCS of choice, such as ~/.dotfiles . destDir is the location to deploy your dotfiles to, such as ~/ . Specify these two things in ~/.config/dotfox/config.toml (or with using the config directory of your choice with XDG_CONFIG_HOME ) [config] dotDir = \"~/.dotfiles\" destDir = \"~\" Now, specify the dotfiles you wish to automatically deploy. These dotfiles will have symlinks created in the destDir , pointing to their respective file or directory in dotDir . Specify the dotfiles using a shell script located at ~/.config/dotfox/deployments/default.sh #!/usr/bin/env bash declare -r home=\"$HOME\" declare -r cfg=\"${XDG_CONFIG_HOME:-$HOME/.config}\" declare -r data=\"${XDG_DATA_HOME:-$HOME/.local/share}\" declare -ra dotfiles=( \"$home/.bashrc\" \"$home/.bash_logout\" ) for dotfile in \"${dotfiles[@]}\"; do printf \"%s\\n\" \"$dotfile\" done DotFox will execute this script, and use every line of standad output as a separate dotfile to track. Standard output would look like the following in this case /home/edwin/.bashrc /home/edwin/.bash_logout Note that with every line, there is always a prefix of the destDir ( /home/edwin i.e. ~/ ) Now, let's try running DotFox $ dotfox status [ERR_NULL_NULL] /home/edwin/.bashrc -> (not fixable) -> Is there a file or directory at /home/edwin/.dotfiles/.bashrc? [ERR_NULL_NULL] /home/edwin/.bash_logout -> (not fixable) -> Is there a file or directory at /home/edwin/.dotfiles/.bash_logout? Done. As you can see, there is a hint that tells us that we forgot to move our dotfiles to the dotDir . How useful! Let's do that... echo 'export EDITOR=\"vim\"' > ~/.dotfiles/.bashrc echo 'clear' > ~/.dotfiles/.bash_logout Now, let's try running again $ dotfox status [ERR_NULL_FILE] /home/edwin/.bashrc -> (fixable) [ERR_NULL_FILE] /home/edwin/.bash_logout -> (fixable) Done. As you can see, the ERR_NULL_NULL status codes changed to ERR_NULL_FILE . The last NULL changed to a file because we placed the correct files in the dotDir (destination directory) Now that the dotfiles are automatically fixable, let's run dotfox deploy $ dotfox deploy Done. $ dotfox status [OK] /home/edwin/.bashrc [OK] /home/edwin/.bash_logout Done. Cool, now the dotfiles have been resolved correctly. If you really want, you can check to see if the symlinks point to the correct location $ ls -al ~/.bash* lrwxrwxrwx 1 edwin edwin 34 Jun 29 21:36 /home/edwin/.bash_logout -> /home/edwin/.dotfiles/.bash_logout lrwxrwxrwx 1 edwin edwin 29 Jun 29 21:36 /home/edwin/.bashrc -> /home/edwin/.dotfiles/.bashrc And they do have their correct target files!","title":"Getting Started"},{"location":"installation/","text":"Installation From Source git clone https://github.com/eankeen/dotfox cd ./dotfox nimble build ./dotfox --help From Distribution","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#from-source","text":"git clone https://github.com/eankeen/dotfox cd ./dotfox nimble build ./dotfox --help","title":"From Source"},{"location":"installation/#from-distribution","text":"","title":"From Distribution"},{"location":"reference/","text":"Reference Status Codes The status code is in the format of <generalCode>-<destDirCode>-<dotDirCode> generalCode The general status code shows the general validity of the symlink (whether it points to the correct location) OK The symlink correctly points to the target file or directory OK/ The symlink correctly points to the target file or directory, with the caveat that the target name has an extraneous suffix slash. On dotfox deploy , this will automatically be normalized ERR A conflict exists. DotFox will attempt to automatically fix the problem. However, if dotfox is unable to, you will need to fix it yourself destDirCode The destDirCode represents status code of a particular dotfile with respect to its destination directory. The destination directory is the directory in which your dotfiles are deployed to and the directory the symlinks are created. Usually, this is located at ~/ For a healthy deployment, you would want these to have a value of SYM SYM The particular dotfile has a corresponding symlink in the destination directory FILE The particular dotfile has a corresponding file in the destination directory. DotFox will try to automatically replace this with a symlink pointing to said target dotfile on deploy DIR The particular dotfile has a corresponding directory in the destination directory. DotFox will try to automatically replace this with a symlink pointing to said target dotfile on deploy NULL The particular dotfile has no corresponding file or directory in the destination directory. DotFox will try to automatically replace this with a symlink pointing to said target dotfile on deploy dotDirCode The dotDirCode represents status code of a particular dotfile with respect to its dotfile directory. The destination directory is the directory in which your dotfiles are held in version control. Most people choose to place this directory at ~/.dotfiles or ~/.dots . For a healthy deployment, you would want these to have a value of either FILE , DIR , or SYM SYM The particular dotfile has a corresponding symlink in the dot directory. This is possible, for example, if you wish to symlink a file like ~/.bashrc to ~/.config/bash/bashrc.sh FILE The particular dotfile has a corresponding file in the dot directory DIR The particular dotfile has a corresponding directory in the dot directory NULL The particular dotfile has a no corresponding file or directory in the dot directory.","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#status-codes","text":"The status code is in the format of <generalCode>-<destDirCode>-<dotDirCode>","title":"Status Codes"},{"location":"reference/#generalcode","text":"The general status code shows the general validity of the symlink (whether it points to the correct location)","title":"generalCode"},{"location":"reference/#ok","text":"The symlink correctly points to the target file or directory","title":"OK"},{"location":"reference/#ok_1","text":"The symlink correctly points to the target file or directory, with the caveat that the target name has an extraneous suffix slash. On dotfox deploy , this will automatically be normalized","title":"OK/"},{"location":"reference/#err","text":"A conflict exists. DotFox will attempt to automatically fix the problem. However, if dotfox is unable to, you will need to fix it yourself","title":"ERR"},{"location":"reference/#destdircode","text":"The destDirCode represents status code of a particular dotfile with respect to its destination directory. The destination directory is the directory in which your dotfiles are deployed to and the directory the symlinks are created. Usually, this is located at ~/ For a healthy deployment, you would want these to have a value of SYM","title":"destDirCode"},{"location":"reference/#sym","text":"The particular dotfile has a corresponding symlink in the destination directory","title":"SYM"},{"location":"reference/#file","text":"The particular dotfile has a corresponding file in the destination directory. DotFox will try to automatically replace this with a symlink pointing to said target dotfile on deploy","title":"FILE"},{"location":"reference/#dir","text":"The particular dotfile has a corresponding directory in the destination directory. DotFox will try to automatically replace this with a symlink pointing to said target dotfile on deploy","title":"DIR"},{"location":"reference/#null","text":"The particular dotfile has no corresponding file or directory in the destination directory. DotFox will try to automatically replace this with a symlink pointing to said target dotfile on deploy","title":"NULL"},{"location":"reference/#dotdircode","text":"The dotDirCode represents status code of a particular dotfile with respect to its dotfile directory. The destination directory is the directory in which your dotfiles are held in version control. Most people choose to place this directory at ~/.dotfiles or ~/.dots . For a healthy deployment, you would want these to have a value of either FILE , DIR , or SYM","title":"dotDirCode"},{"location":"reference/#sym_1","text":"The particular dotfile has a corresponding symlink in the dot directory. This is possible, for example, if you wish to symlink a file like ~/.bashrc to ~/.config/bash/bashrc.sh","title":"SYM"},{"location":"reference/#file_1","text":"The particular dotfile has a corresponding file in the dot directory","title":"FILE"},{"location":"reference/#dir_1","text":"The particular dotfile has a corresponding directory in the dot directory","title":"DIR"},{"location":"reference/#null_1","text":"The particular dotfile has a no corresponding file or directory in the dot directory.","title":"NULL"},{"location":"troubleshooting/","text":"Troubleshooting 1. Deploy doesn't seem to do anything It is possible that your Bash script tells dotfox to do multiple things to the same file / underlying symlink","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#1-deploy-doesnt-seem-to-do-anything","text":"It is possible that your Bash script tells dotfox to do multiple things to the same file / underlying symlink","title":"1. Deploy doesn't seem to do anything"}]}